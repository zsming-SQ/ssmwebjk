##oracle
jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
#jdbc.url=jdbc:oracle:thin:@10.127.6.30:1521:orcl
jdbc.url=jdbc:oracle:thin:@10.127.6.25:1521:ggfw1
jdbc.username=qmcb
jdbc.password=qmcb

cpool.checkoutTimeout=60
cpool.minPoolSize=10
cpool.maxPoolSize=100
cpool.maxIdleTime=600
cpool.acquireIncrement=3
cpool.maxIdleTimeExcessConnections=20

proxool.alias=spring_proxool
#<!--最小连接数(默认2个,包含活动的和空闲的)-->  
proxool.minimumConnectionCount=5

#<!--最大连接数(默认5个),超过了这个连接数,再有请求时,就排在队列中等候,最大的等待请求数由maximum-new-connections决定 --> 
proxool.maximumConnectionCount=20

#<!--proxool自动侦察各个连接状态的时间间隔(毫秒),侦察到空闲的连接就马上回收,超时的销毁 默认30秒-->  
proxool.hourseKeepingSleepTime=30000

# <!--没有空闲连接可以分配而在队列中等候的最大请求数,超过这个请求数的用户连接就不会被接受-->  
#<!-- maximum-new-connections不被推荐使用了，所以用simultaneous-build-throttle来代替了 -->  
#<!--maximum-new-connections>10</maximum-new-connections-->
proxool.simultaneous-build-throttle=15
  
 #<!--最少保持的空闲连接数(默认2个)-->  
proxool.prototypeCount=2
#<!--用于保持连接的测试语句 -->  
proxool.houseKeepingTestSql= select sysdate from dual 
#<!-- 是否监控sql信息 -->  
proxool.trace=true  
proxool.verbose=true
proxool.statistics=10s,1m,1d
proxool.statistics-log-level=ERROR
#<!-- maximum-active-time缺省5minutes 172800000毫秒=48小时-->
#第一个48小时的是设置连接活动的时间，即：你的sql或存储过 程执行的时间，估算一下你的应用中的sql或存储过程最长的执行时间a,将这个值设为大于a就行了，这是项目中实际发现的问题经验，我有个sql执行时间 超过了5分钟，而原来没有设置这个值，缺省为5分钟，所以我的应用刚起来没问题，跑一段时间，跑到这个sql时执行了一段时间后台就报：
proxool.maximumActiveTime=172800000
#<!-- maximum-connection-lifetime缺省4hours 180000000毫秒=50小时-->
#设置一个线程连接的寿命，这个值理论上应该大于连接的活动时间限制，不然活动时间限制就没有意义了，所以设为了50个小时
proxool.maximumConnectionLifetime=180000000